datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Product {
  id          Int      @id @default(autoincrement()) // Unique identifier for the product, auto-incremented
  name        String                                // Name of the product
  price       Float                                 // Price of the product
  description String?                               // Optional description of the product
  createdAt   DateTime @default(now())              // Timestamp when the product was created, defaults to the current time
}

model Order {
  id        Int      @id @default(autoincrement()) // Unique identifier for the order, auto-incremented
  total     Float                                // Total amount for the order
  createdAt DateTime @default(now())             // Timestamp when the order was created, defaults to the current time
  userId    Int                                  // Foreign key referencing the Customer who placed the order
  user      Customer @relation(fields: [userId], references: [id]) // Relation to the Customer model
}

model Customer {
  id     Int     @id @default(autoincrement()) // Unique identifier for the customer, auto-incremented
  name   String                              // Name of the customer
  email  String  @unique                     // Unique email of the customer
  orders Order[]                             // List of orders placed by the customer
}